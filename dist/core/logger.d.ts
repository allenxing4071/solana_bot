/**
 * 日志服务模块
 * 为整个应用提供统一的日志记录功能
 *
 * 【编程基础概念通俗比喻】
 * 1. 日志(Logger) = 渔船航行记录本：
 *    记录船上发生的所有重要事件，便于回顾和分析
 *    例如：logger.info() 就像在航行日志中记录"今天天气晴朗，捕获10吨鱼"
 *
 * 2. 日志级别(Log Level) = 记录重要性分类：
 *    不同事件有不同重要性，分类记录便于关注重点
 *    例如：ERROR级别就像"船体进水"这样的紧急情况
 *
 * 3. 日志格式化(Formatting) = 规范记录格式：
 *    统一的记录格式便于阅读和分析
 *    例如：添加时间戳就像每条记录都标注"2023年5月10日14:30"
 *
 * 4. 日志输出(Transport) = 记录保存方式：
 *    决定记录保存在航海日志本上还是无线电广播出去
 *    例如：控制台输出就像向船员广播，文件输出就像写进正式航海日志
 *
 * 【比喻解释】
 * 这个日志服务就像渔船上的航海记录系统：
 * - 记录航行中的所有重要事件（程序运行中的关键节点）
 * - 区分紧急事件和日常事件（错误和普通日志）
 * - 统一记录格式便于日后查阅（结构化日志）
 * - 可以向不同目标发送记录（控制台、文件、远程服务）
 * - 记录包含详细的时间和位置信息（时间戳和上下文）
 */
/**
 * 创建日志辅助函数
 * 包装Winston日志器，添加模块上下文
 *
 * 【比喻解释】
 * 这就像设计标准化的记录流程：
 * - 简化记录方法（辅助函数）
 * - 确保每条记录都有来源信息（模块名）
 * - 支持添加详细的背景信息（元数据）
 * - 根据情况选择不同的记录重要性（日志级别）
 *
 * 【编程语法通俗翻译】
 * const logger = {} = 工具箱：准备一套专用的记录工具
 * module参数 = 来源标记：标记记录来自哪个船舱或部门
 * meta参数 = 详细情况：记录事件的具体细节和背景
 */
declare const logger: {
    /**
     * 记录调试信息
     * 低级别的技术细节，通常用于开发调试
     *
     * 【比喻解释】
     * 这就像记录船只日常运行的细节数据：
     * - 记录发动机运行参数（技术细节）
     * - 记录天气和洋流状况（环境数据）
     * - 这些记录对航行不是必须，但对分析船只性能很有用
     *
     * @param {string} message - 日志消息，就像记录的主要内容
     * @param {string} [module] - 模块名称，就像报告来源的船舱
     * @param {Record<string, unknown>} [meta] - 元数据，就像事件的详细背景
     */
    debug: (message: string, module?: string, meta?: Record<string, unknown>) => void;
    /**
     * 记录信息
     * 常规操作信息，表示程序正常运行
     *
     * 【比喻解释】
     * 这就像记录船只的正常航行信息：
     * - 记录按计划到达某个航点（程序里程碑）
     * - 记录补给燃料和物资（资源使用）
     * - 记录例行维护工作（常规操作）
     *
     * @param {string} message - 日志消息，就像记录的主要内容
     * @param {string} [module] - 模块名称，就像报告来源的船舱
     * @param {Record<string, unknown>} [meta] - 元数据，就像事件的详细背景
     */
    info: (message: string, module?: string, meta?: Record<string, unknown>) => void;
    /**
     * 记录警告
     * 潜在问题或需要注意的情况
     *
     * 【比喻解释】
     * 这就像记录船只遇到的可能风险：
     * - 记录燃料不足警告（资源警告）
     * - 记录恶劣天气预警（环境风险）
     * - 记录设备出现小故障（功能降级）
     *
     * @param {string} message - 日志消息，就像记录的主要内容
     * @param {string} [module] - 模块名称，就像报告来源的船舱
     * @param {Record<string, unknown>} [meta] - 元数据，就像事件的详细背景
     */
    warn: (message: string, module?: string, meta?: Record<string, unknown>) => void;
    /**
     * 记录错误
     * 严重问题或功能失败情况
     *
     * 【比喻解释】
     * 这就像记录船只遇到的严重问题：
     * - 记录发动机故障（系统错误）
     * - 记录船体进水（数据损坏）
     * - 记录导航系统失效（连接中断）
     *
     * @param {string} message - 日志消息，就像记录的主要内容
     * @param {string} [module] - 模块名称，就像报告来源的船舱
     * @param {Record<string, unknown>} [meta] - 元数据，就像事件的详细背景和错误堆栈
     */
    error: (message: string, module?: string, meta?: Record<string, unknown>) => void;
};
export default logger;
