/**
 * 钱包管理器（渔船的财务舱）
 * 负责管理交易钱包、资金和代币
 *
 * 【编程基础概念通俗比喻】
 * 1. 钱包(Wallet) = 船长的保险箱：
 *    就像存放捕鱼许可证和贵重物品的保险箱
 *    例如：创建钱包就像配备一个有密码锁的保险箱
 *
 * 2. 密钥对(Keypair) = 船长的钥匙和身份证：
 *    就像开启保险箱的钥匙和证明身份的证件
 *    例如：privateKey就像保险箱的钥匙，publicKey就像船长的身份证
 *
 * 3. 代币余额(Token Balance) = 不同类型的捕获物库存：
 *    就像船上储存的各种不同鱼类的数量记录
 *    例如：getTokenBalance()就像清点某种鱼的库存
 *
 * 4. 资金转移(Transfer) = 捕获物交易：
 *    就像将捕获的鱼分配给不同的储藏舱或交易给其他渔船
 *    例如：transferSol()就像将某些捕获物转移到其他地方
 *
 * 5. 账户创建(Account Creation) = 新建储藏舱：
 *    就像在船上建造新的专用储藏空间
 *    例如：createTokenAccount()就像为特定鱼类建造专门的冷藏柜
 *
 * 【比喻解释】
 * 这个模块就像渔船上的财务舱：
 * - 保管船长的钥匙和身份证明（私钥和公钥）
 * - 记录和管理各类捕获物的库存（代币余额）
 * - 负责捕获物的转移和分配（转账功能）
 * - 为新类型的捕获物准备储藏空间（创建代币账户）
 * - 定期清点库存并向船长报告（余额查询）
 */
import { Keypair, PublicKey } from '@solana/web3.js';
import { TokenInfo } from '../../core/types';
/**
 * 钱包管理器类
 * 负责管理交易钱包，提供代币操作相关功能
 *
 * 【比喻解释】
 * 这就像渔船上的财务管理员：
 * - 守护着船长的身份证明和钥匙（管理钱包）
 * - 熟知所有类型的捕获物和它们的价值（了解代币）
 * - 精确记录每次捕捞的收获（跟踪余额）
 * - 安排捕获物的存放和分配（执行转账）
 * - 确保所有交易都符合海洋法规（验证交易）
 * - 向船长报告财务状况（提供余额信息）
 *
 * 【编程语法通俗翻译】
 * class = 专业角色：船上有特定职责的专业人员
 * private = 私密信息：只有财务管理员知道的机密内容
 */
declare class WalletManager {
    private tradingWallet;
    private connection;
    /**
     * 构造函数
     * 初始化钱包管理器
     *
     * 【比喻解释】
     * 这就像财务管理员上船报到时：
     * - 接收船长的保险箱和钥匙（配置钱包）
     * - 设置与海港的通信设备（初始化连接）
     * - 确认保险箱正常工作（验证钱包）
     * - 向船长报告财务舱已准备就绪（日志记录）
     *
     * 【编程语法通俗翻译】
     * constructor = 入职仪式：接收职责并准备工作
     */
    constructor(privateKey: string | Uint8Array);
    /**
     * 从配置加载钱包
     * 从配置文件或环境变量中加载钱包密钥
     *
     * 【比喻解释】
     * 这就像财务管理员从船长的秘密文件中取出钥匙：
     * - 检查配置文件中是否有钥匙信息（检查配置）
     * - 如果找到了钥匙，取出并保管好（加载密钥）
     * - 如果没找到钥匙，制作一把新钥匙（创建新钱包）
     * - 确认钥匙能正常使用（验证钱包）
     * - 将钥匙存放在安全的地方（保存密钥）
     *
     * 【编程语法通俗翻译】
     * private = 私密操作：不对外公开的内部工作
     */
    private loadWalletFromConfig;
    /**
     * 获取交易钱包
     * 返回当前使用的交易钱包
     *
     * 【比喻解释】
     * 这就像船长要求查看自己的保险箱和钥匙：
     * - 财务管理员拿出保管的保险箱钥匙和身份证（返回钱包）
     *
     * @returns 钱包密钥对，就像保险箱钥匙和身份证
     */
    getWallet(): Keypair;
    /**
     * 获取SOL余额
     * 查询指定地址的SOL代币余额
     *
     * 【比喻解释】
     * 这就像检查渔船的基本燃料储备：
     * - 使用通信设备联系海港查询（连接区块链）
     * - 询问特定船只的燃料储备情况（查询余额）
     * - 将得到的数值转换为船长熟悉的单位（转换单位）
     * - 向船长报告当前燃料储备（返回余额）
     *
     * 【编程语法通俗翻译】
     * async = 需等待的操作：需要耐心等待结果的任务
     *
     * @param address 要查询的地址，就像询问哪艘船的燃料储备
     * @returns SOL余额，就像燃料储备量
     */
    getSOLBalance(address?: PublicKey): Promise<number>;
    /**
     * 获取代币余额
     * 查询指定地址的特定代币余额
     *
     * 【比喻解释】
     * 这就像检查船上特定类型鱼的库存：
     * - 确认要查询哪种鱼的库存（确定代币和地址）
     * - 找到存放这种鱼的专用仓库（查找代币账户）
     * - 如果没有这种鱼的仓库，报告库存为零（处理不存在的账户）
     * - 清点仓库中的存量并记录（查询余额）
     * - 向船长报告该种鱼的确切存量（返回余额）
     *
     * 【编程语法通俗翻译】
     * async = 需等待的操作：需要耐心等待结果的任务
     * try/catch = 安全预案：有备无患的做法
     *
     * @param token 代币信息，就像要查询哪种鱼的信息
     * @param address 要查询的地址，就像询问哪艘船的库存
     * @returns 代币余额，就像特定鱼类的库存量
     */
    getTokenBalance(token: TokenInfo, address?: PublicKey): Promise<number>;
    /**
     * 转移SOL
     * 将SOL从交易钱包转移到指定地址
     *
     * 【比喻解释】
     * 这就像将船上的燃料转移给另一艘船：
     * - 确认要转移多少燃料（确定金额）
     * - 确认要转给哪艘船（确定接收地址）
     * - 准备一份正式的转移文件（创建交易）
     * - 船长签署转移文件（签名交易）
     * - 通过海港执行燃料转移（发送交易）
     * - 等待确认转移完成（等待确认）
     * - 记录转移结果（日志记录）
     *
     * 【编程语法通俗翻译】
     * async = 需等待的操作：需要耐心等待结果的任务
     *
     * @param toAddress 接收地址，就像接收燃料的船
     * @param amountSol 转移金额，就像要转移的燃料量
     * @returns 交易签名，就像转移操作的收据
     */
    transferSol(toAddress: PublicKey, amountSol: number): Promise<string>;
    /**
     * 创建关联代币账户
     * 为特定代币创建关联账户
     *
     * 【比喻解释】
     * 这就像为新类型的鱼创建专用存储仓库：
     * - 确认为哪种鱼建造仓库（确定代币）
     * - 确认建在哪艘船上（确定所有者）
     * - 检查是否已经有这种鱼的仓库（检查账户存在）
     * - 如果已有仓库，就不重复建造（返回已有账户）
     * - 准备建造仓库的方案图（创建交易）
     * - 船长签署建造命令（签名交易）
     * - 执行建造工作（发送交易）
     * - 确认仓库建造完成（等待确认）
     * - 记录新仓库的位置（返回地址）
     *
     * 【编程语法通俗翻译】
     * async = 需等待的操作：需要耐心等待结果的任务
     *
     * @param mintAddress 代币铸造地址，就像鱼的品种编号
     * @param owner 所有者地址，就像哪艘船需要这个仓库
     * @returns 代币账户地址，就像新仓库的位置
     */
    createTokenAccount(mintAddress: PublicKey, owner?: PublicKey): Promise<PublicKey>;
}
export declare const walletManager: WalletManager;
export default walletManager;
